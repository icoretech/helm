# mcp-server Helm Chart

Generic runner for Model Context Protocol (MCP) servers on Kubernetes.
This chart deploys one Deployment/Service per servers[] entry (Node via npx,
Python via uv tool run, or a pre-built image), and can also register external
OpenAPI specs without creating Pods. Everything is wired into an Unla MCP
Gateway (subchart) that exposes a single aggregated endpoint.

## Stdio transport (not supported)

This chart intentionally does not support stdio-only MCP servers. Kubernetes pods are designed for
long‑lived network services; supervising interactive stdio processes reliably (signals, restarts,
child lifecycles) is brittle. Pick servers that expose HTTP (SSE) or WebSocket natively. If you must
translate stdio, run a dedicated gateway outside this chart and route to it with a normal Service.

## Prerequisites

- Kubernetes 1.31+
- Helm 3.10+

## Installing the Chart

To install with the release name `my-mcp` from OCI:

```bash
helm install my-mcp oci://ghcr.io/icoretech/charts/mcp-server
```

Or from the GitHub Pages helm repo:

```bash
helm repo add icoretech https://icoretech.github.io/helm
helm repo update
helm install my-mcp icoretech/mcp-server
```

## Configuration

The following table lists the configurable parameters of the chart and their
default values.

<!-- markdownlint-disable MD013 -->
{{ template "chart.valuesSection" . }}
<!-- markdownlint-enable MD013 -->

## Transports and Exposure (via Unla Gateway)

Transports

- HTTP (SSE/streamable HTTP): long‑lived HTTP connection.
- WebSocket: use when your server exposes a WS endpoint.

Exposure is handled by the Unla subchart. Port-forward the gateway Service:

```bash
kubectl -n <ns> port-forward svc/<release> 8000:5235
```

Timeout tips

- SSE: raise read/send/proxy timeouts (NGINX `proxy-read-timeout` and
  `proxy-send-timeout` to `3600`).
- WebSocket: ensure upgrade support (NGINX: `enable-websocket: "true"`).

## Dependency Caching (per server)

Enable servers[].cache to persist npm/uv caches between restarts. Set
servers[].cache.pvc.existingClaim to bind an existing PVC or omit to let the
chart create one per server.

## Examples provided under `charts/mcp-server/examples/`

- `node-server-everything.yaml` - Node mode using
  `@modelcontextprotocol/server-everything` (streamable HTTP pinned to Node 22).
- `python-aws-pricing.yaml` - Minimal Python mode example running the
  AWS Pricing MCP server (HTTP/SSE).
- `python-fastmcp-http.yaml` - Advanced Python mode running the
  `mcp-server` sample with streamable HTTP arguments.
 - `openapi.yaml` - Register an external OpenAPI URL with Unla (no Pod created).
  
  

Gateway API quickstart:

```bash
# Install a Gateway in the same namespace as your release (default: mcp)
kubectl apply -f charts/mcp-server/examples/gateway-http.yaml

# Deploy the chart with an HTTPRoute example (SSE)
helm upgrade --install mcp-sse charts/mcp-server -n mcp -f charts/mcp-server/examples/httproute-sse-gatewayapi.yaml

# The route attaches to Gateway "gateway" listener "http"
```
