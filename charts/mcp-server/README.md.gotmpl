# mcp-server Helm Chart

Generic runner for Model Context Protocol (MCP) servers on Kubernetes.
Each entry in `servers[]` becomes its own Deployment and Service. You can run

- **HTTP/SSE/WebSocket servers** (Node via `npx`, Python via `uv`/`uvx`, or any
  container image exposing a port).
- **Stdio servers** by turning on `servers[].stdioBridge`. The bridge uses our
  `ghcr.io/icoretech/mcp-stdio-bridge` image to spawn the stdio program inside
  the Pod and expose it as an SSE endpoint.
- **OpenAPI servers** by pointing to an external specification (no Pod is
  created; we just register it with the gateway).

Everything is wired into the Unla gateway subchart so you get a single MCP
endpoint for all of your servers. The gateway/dashboard can be disabled via
`unla.enabled=false` if you only want raw Deployments.

## Transport options

`servers[].*` supports three patterns:

1. `node` / `python` / `image`: native network servers. They expose HTTP or
   WebSocket directly.
2. `stdioBridge`: wrap a stdio-only tool and convert it to SSE. The bridge image
   ships with Node, Python, uv/uvx, and mcp-proxy so commands like
   `uvx mcp-server-reddit` work out of the box.
3. `openapi`: register an external OpenAPI spec with Unla (no Deployment).

Stdio bridges are opt-in per server. When `stdioBridge.enabled=true`, the chart
runs the bridge container and honors `serverCommand`/`serverArgs`. If you’re
using a server that already supports HTTP/WebSocket, skip the bridge and use
`node`, `python`, or `image` directly.

## Prerequisites

- Kubernetes 1.31+
- Helm 3.10+

## Installing the Chart

To install with the release name `my-mcp` from OCI:

```bash
helm install my-mcp oci://ghcr.io/icoretech/charts/mcp-server
```

Or from the GitHub Pages helm repo:

```bash
helm repo add icoretech https://icoretech.github.io/helm
helm repo update
helm install my-mcp icoretech/mcp-server
```

## Configuration

The following table lists the configurable parameters of the chart and their
default values.

<!-- markdownlint-disable MD013 -->
{{ template "chart.valuesSection" . }}
<!-- markdownlint-enable MD013 -->

## Gateway exposure (Unla subchart)

When `unla.enabled=true` (default) the chart also deploys:

- Postgres (for Unla state)
- MCP Gateway deployment/service (`mcp-server`)
- Dashboard deployment/service (`mcp-server-dashboard`)

> **Security note**: by default the dashboard secret seeds the credentials
> `admin` / `admin` so that the registration job can log in automatically. For
> production setups override `unla.dashboard.SUPER_ADMIN_USERNAME` and
> `SUPER_ADMIN_PASSWORD` with your own values.

Port-forward the gateway to talk to every server:

```bash
kubectl -n <ns> port-forward svc/<release> 8000:5235
```

### If you don’t want Unla

Set `unla.enabled=false`. This skips the gateway/dash and stops rendering the
register hooks.

## Examples (`charts/mcp-server/examples/`)

| Example                          | Mode                                 | Notes                                                |
|----------------------------------|--------------------------------------|------------------------------------------------------|
| `node-server-everything.yaml`    | Native HTTP (Node)                   | Uses `@modelcontextprotocol/server-everything`.      |
| `node-chrome-devtools-bridge.yaml` | Stdio bridge (Node)                 | Runs Chrome DevTools via the bridge.                 |
| `python-fastmcp-http.yaml`       | Native HTTP (Python)                 | FastMCP server launched with `uv tool run`.          |
| `openapi.yaml`                   | OpenAPI registration                 | Registers an external spec; no Pod is created.       |
| `gateway-http.yaml`              | Gateway API ingress example          | Install a Gateway and attach HTTPRoute manually.     |
| `gateway-two-servers.yaml`       | Multi-server setup with Unla enabled | Demonstrates two servers sharing the gateway.        |

Refer to the examples for values files you can copy or adapt.
