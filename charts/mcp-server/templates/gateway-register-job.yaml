{{- $hasServers := and (hasKey .Values "servers") (gt (len .Values.servers) 0) -}}
{{- $ctx := dict "hasReg" false -}}
{{- range $i, $s := .Values.servers -}}
  {{- $reg := (get $s "register") -}}
  {{- $regMap := ternary $reg (dict) (kindIs "map" $reg) -}}
  {{- $enabled := (default true ($regMap.enabled)) -}}
  {{- if $enabled -}}
    {{- $_ := set $ctx "hasReg" true -}}
  {{- end -}}
{{- end -}}
{{- $unlaFlag := true -}}
{{- if kindIs "map" .Values.unla -}}
  {{- if kindIs "bool" .Values.unla.enabled -}}
    {{- $unlaFlag = .Values.unla.enabled -}}
  {{- end -}}
{{- end -}}
{{- if and $hasServers $unlaFlag ($ctx.hasReg) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mcp-server.fullname" . }}-register
  labels:
    {{- include "mcp-server.labels" . | nindent 4 }}
    app.kubernetes.io/component: gateway-register
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded,hook-failed
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        {{- include "mcp-server.labels" . | nindent 8 }}
        app.kubernetes.io/component: gateway-register
    spec:
      restartPolicy: OnFailure
      containers:
        - name: register
          image: curlimages/curl:8.10.1
          imagePullPolicy: IfNotPresent
          env:
            - name: DASH_HOST
              value: {{ printf "%s-dashboard" .Release.Name | quote }}
            - name: DASH_PORT
              value: "5234"
          envFrom:
            - secretRef:
                name: mcp-dashboard-secret
          volumeMounts:
            - name: mcp-register
              mountPath: /cfg
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -eu
              echo "Waiting for apiserver http ${DASH_HOST}:${DASH_PORT}"
              for i in $(seq 1 20); do
                curl -fsS "http://${DASH_HOST}:${DASH_PORT}/api/runtime-config" >/dev/null 2>&1 && break || sleep 2
              done
              echo "Waiting for upstream server TCP ports"
              {{- range $i, $srv := .Values.servers }}
              {{- $isOpenAPI := hasKey $srv "openapi" }}
              {{- if not $isOpenAPI }}
              {{- $isNode := hasKey $srv "node" }}
              {{- $isPython := hasKey $srv "python" }}
              {{- $defaultPort := ternary 3001 (ternary 3000 3000 $isPython) $isNode }}
              {{- $name := ($srv.name | default (printf "srv-%d" $i)) | trunc 40 | trimSuffix "-" }}
              echo " - {{ $name }}:{{ $srv.port | default $defaultPort }}"
              for j in $(seq 1 15); do nc -z -w 1 {{ include "mcp-server.fullname" $ }}-{{ $name }} {{ $srv.port | default $defaultPort }} && break || sleep 2; done
              {{- end }}
              {{- end }}
              echo "Login to dashboard to obtain JWT"
              TOKEN=$(curl -sS -H 'Content-Type: application/json' \
                -d "{\"username\":\"${super_admin_username}\",\"password\":\"${super_admin_password}\"}" \
                -w '\n%{http_code}' "http://${DASH_HOST}:${DASH_PORT}/api/auth/login")
              BODY=$(echo "$TOKEN" | head -n1)
              CODE=$(echo "$TOKEN" | tail -n1)
              TOKEN=$(echo "$BODY" | sed -n 's/.*"token"\s*:\s*"\([^"]*\)".*/\1/p')
              if [ "$CODE" = "401" ]; then
                echo "Login with secret failed; retrying default admin/admin"
                TOKEN=$(curl -sS -H 'Content-Type: application/json' \
                  -d '{"username":"admin","password":"admin"}' \
                  "http://${DASH_HOST}:${DASH_PORT}/api/auth/login" | sed -n 's/.*"token"\s*:\s*"\([^"]*\)".*/\1/p')
              fi
              if [ -z "$TOKEN" ]; then echo "Failed to obtain JWT"; exit 1; fi
              echo "Upserting MCP config"
              CODE=$(curl -sS -o /tmp/resp -w '%{http_code}' -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/yaml' \
                --data-binary @/cfg/config.yaml \
                "http://${DASH_HOST}:${DASH_PORT}/api/mcp/configs" || true)
              if [ "$CODE" = "409" ]; then
                echo "Config exists, attempting update (PUT)"
                curl -sS -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/yaml' \
                  -X PUT --data-binary @/cfg/config.yaml \
                  "http://${DASH_HOST}:${DASH_PORT}/api/mcp/configs" >/dev/null
              elif [ "$CODE" = "200" ] || [ "$CODE" = "201" ]; then
                echo "Config created"
              else
                echo "Create returned HTTP $CODE"; cat /tmp/resp || true; exit 1
              fi
      volumes:
        - name: mcp-register
          configMap:
            name: {{ include "mcp-server.fullname" . }}-register
{{- end }}
