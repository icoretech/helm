{{- $hasServers := and (hasKey .Values "servers") (gt (len .Values.servers) 0) -}}
{{- $ctx := dict "hasReg" false -}}
{{- range $i, $s := .Values.servers -}}
  {{- $reg := (get $s "register") -}}
  {{- $regMap := ternary $reg (dict) (kindIs "map" $reg) -}}
  {{- $enabled := (default true ($regMap.enabled)) -}}
  {{- if $enabled -}}
    {{- $_ := set $ctx "hasReg" true -}}
  {{- end -}}
{{- end -}}
{{- $unlaFlag := true -}}
{{- if kindIs "map" .Values.unla -}}
  {{- if kindIs "bool" .Values.unla.enabled -}}
    {{- $unlaFlag = .Values.unla.enabled -}}
  {{- end -}}
{{- end -}}
{{- if and $hasServers $unlaFlag ($ctx.hasReg) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mcp-server.fullname" . }}-register
  labels:
    {{- include "mcp-server.labels" . | nindent 4 }}
data:
  config.yaml: |
    name: {{ .Release.Name | quote }}
    {{- /* tenant is global in Unla config; pick from first server.register.tenant or default */}}
    {{- $tenant := "default" }}
    {{- range $i, $s := .Values.servers }}
      {{- $reg := (get $s "register") }}
      {{- $regMap := ternary $reg (dict) (kindIs "map" $reg) }}
      {{- if $regMap.tenant }}
        {{- $tenant = $regMap.tenant }}
        {{- break }}
      {{- end -}}
    {{- end }}
    tenant: {{ $tenant | quote }}
    routers:
    {{- range $i, $srv := .Values.servers }}
      {{- $reg := (get $srv "register") }}
      {{- $regMap := ternary $reg (dict) (kindIs "map" $reg) }}
      {{- $enabled := (default true ($regMap.enabled)) }}
      {{- if $enabled }}
      - server: {{ ($srv.name | default (printf "srv-%d" $i)) | quote }}
        prefix: {{ (default (printf "/gateway/%s" ($srv.name | default (printf "srv-%d" $i))) ($regMap.prefix)) | quote }}
        cors:
          allowOrigins: ["*"]
          allowMethods: ["GET","POST","OPTIONS"]
          allowHeaders: ["Content-Type","Authorization","Mcp-Session-Id","mcp-protocol-version"]
          exposeHeaders: ["Mcp-Session-Id","mcp-protocol-version"]
          allowCredentials: true
{{- end }}
{{- end }}
    mcpServers:
    {{- range $i, $srv := .Values.servers }}
      {{- $reg := (get $srv "register") }}
      {{- $regMap := ternary $reg (dict) (kindIs "map" $reg) }}
      {{- $enabled := (default true ($regMap.enabled)) }}
      {{- if $enabled }}
      {{- $isNode := hasKey $srv "node" }}
      {{- $isPython := hasKey $srv "python" }}
      {{- $isOpenAPI := hasKey $srv "openapi" }}
      {{- $isBridge := and (hasKey $srv "stdioBridge") ($srv.stdioBridge.enabled | default false) }}
      {{- $defaultPort := ternary 3001 (ternary 3000 3000 $isPython) $isNode }}
      {{- if $isBridge }}{{- $defaultPort = (int 3000) }}{{- end }}
      {{- $type := (default (ternary "openapi" (ternary "sse" "streamable-http" $isBridge) $isOpenAPI) ($regMap.type)) }}
      {{- $path := (default (ternary "/sse" "/mcp" (eq $type "sse")) ($regMap.path)) }}
      {{- $name := ($srv.name | default (printf "srv-%d" $i)) | trunc 40 | trimSuffix "-" }}
      - type: {{ $type | quote }}
        name: {{ $name | quote }}
        {{- if $isOpenAPI }}
        url: {{ (get $srv.openapi "url") | quote }}
        {{- else }}
        url: {{ printf "http://%s-%s:%d%s" (include "mcp-server.fullname" $) $name (int (default $defaultPort $srv.port)) $path | quote }}
        {{- end }}
        policy: "onDemand"
        preinstalled: "true"
      {{- end }}
    {{- end }}
{{- end }}
