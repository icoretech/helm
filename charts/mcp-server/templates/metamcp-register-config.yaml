{{- $hasServers := and (hasKey .Values "servers") (gt (len .Values.servers) 0) -}}
{{- $mm := .Values.metamcp -}}
{{- $mmEnabled := false -}}
{{- if kindIs "map" $mm -}}{{- if kindIs "bool" $mm.enabled -}}{{- $mmEnabled = $mm.enabled -}}{{- end -}}{{- end -}}
{{- if and $hasServers $mmEnabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mcp-server.fullname" . }}-metamcp-register
  labels:
    {{- include "mcp-server.labels" . | nindent 4 }}
data:
  bootstrap.json: |
    {{- /* Build MetaMCP import payload from mcp-server servers[] */ -}}
    {{- $servers := list -}}
    {{- range $i, $srv := .Values.servers -}}
      {{- $name := ($srv.name | default (printf "srv-%d" $i)) | trunc 40 | trimSuffix "-" -}}
      {{- $isOpenAPI := hasKey $srv "openapi" -}}
      {{- $isNode := hasKey $srv "node" -}}
      {{- $isPython := hasKey $srv "python" -}}
      {{- $isBridge := and (hasKey $srv "stdioBridge") ($srv.stdioBridge.enabled | default false) -}}
      {{- $defaultPort := ternary 3001 (ternary 3000 3000 $isPython) $isNode -}}
      {{- if $isBridge }}{{- $defaultPort = (int 3000) }}{{- end -}}
      {{- $port := (int (default $defaultPort $srv.port)) -}}
      {{- $type := ternary "sse" "streamable" $isBridge -}}
      {{- $path := ternary "/sse" "/mcp" (eq $type "sse") -}}
      {{- if not $isOpenAPI -}}
        {{- $url := printf "http://%s-%s:%d%s" (include "mcp-server.fullname" $) $name $port $path -}}
        {{- $item := dict "type" $type "name" $name "url" $url -}}
        {{- $servers = append $servers $item -}}
      {{- end -}}
    {{- end -}}
    {{- $serverNames := list -}}
    {{- range $servers }}
      {{- $serverNames = append $serverNames .name -}}
    {{- end -}}
    {{- $ns := dict "name" (.Release.Name) "servers" $serverNames -}}
    {{- $ep := dict "name" (.Release.Name) "transport" "sse" "auth" (dict) -}}
    {{- $payload := dict "servers" $servers "namespace" $ns "endpoint" $ep -}}
{{ toJson $payload | nindent 4 }}
{{- end }}
