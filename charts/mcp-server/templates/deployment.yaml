apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mcp-server.fullname" . }}
  labels:
    {{- include "mcp-server.labels" . | nindent 4 }}
    {{- with .Values.additionalLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.additionalAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mcp-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mcp-server.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mcp-server.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- /* Select image and runtime based on mode */ -}}
          {{- $useGateway := and (eq .Values.transport.type "stdio") (.Values.transport.stdioGateway.enabled) -}}
          {{- if $useGateway }}
          image: {{ .Values.transport.stdioGateway.image | quote }}
          imagePullPolicy: {{ .Values.transport.stdioGateway.pullPolicy }}
          command: ["/bin/sh","-lc"]
          args:
            - |
              {{ if .Values.transport.stdioGateway.preStart }}{{ join " && " .Values.transport.stdioGateway.preStart }} && {{ end }}
              mcp-proxy \
                --port {{ .Values.service.port | default 3000 }} \
                --host {{ .Values.transport.stdioGateway.host | default "0.0.0.0" }}{{ if .Values.transport.stdioGateway.passEnvironment }} \
                --pass-environment{{ end }}{{- range $o := .Values.transport.stdioGateway.allowOrigins }} \
                --allow-origin {{ $o | quote }}{{- end }}{{ if .Values.transport.stdioGateway.cwd }} \
                --cwd {{ .Values.transport.stdioGateway.cwd | quote }}{{ end }}{{ if or (gt (len .Values.transport.stdioGateway.servers) 0) (and .Values.transport.stdioGateway.namedServersJson (ne .Values.transport.stdioGateway.namedServersJson "")) }} \
                --named-server-config /etc/mcp/servers.json{{ end }} \
                --
              {{- if .Values.transport.stdioGateway.server.command }}
              {{ .Values.transport.stdioGateway.server.command }}{{ if .Values.transport.stdioGateway.server.args }} {{ join " " .Values.transport.stdioGateway.server.args }}{{ end }}
              {{- else if eq .Values.mode "python" }}
              {{- /* spawn python stdio server via uvx */ -}}
              uvx {{- if .Values.python.fromGit }} --from {{ .Values.python.fromGit }}{{ end }} {{ .Values.python.package }}{{ if .Values.python.args }} {{ join " " .Values.python.args }}{{ end }}
              {{- else if eq .Values.mode "node" }}
              npx -y {{ if .Values.node.package }}{{ .Values.node.package }}@{{ .Values.node.version }}{{ end }}{{ if .Values.node.args }} {{ join " " .Values.node.args }}{{ end }}
              {{- else }}
              echo "No stdio server command provided. Set transport.stdioGateway.server.command or use mode=node/python." && sleep 3600
              {{- end }}
          {{- else if eq .Values.mode "node" }}
          image: {{ .Values.node.image | quote }}
          imagePullPolicy: {{ .Values.node.pullPolicy }}
          {{- else if eq .Values.mode "python" }}
          image: {{ .Values.python.image | quote }}
          imagePullPolicy: {{ .Values.python.pullPolicy }}
          {{- else }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- end }}

          {{- /* command/args selection */ -}}
          {{- if $useGateway }}
          {{- /* gateway mode: env for gateway + optional server.env */ -}}
          {{- if or .Values.transport.stdioGateway.env .Values.transport.stdioGateway.server.env .Values.container.env }}
          env:
            {{- range $e := .Values.transport.stdioGateway.env }}
            - name: {{ $e.name | quote }}
              value: {{ $e.value | quote }}
            {{- end }}
            {{- range $e := .Values.transport.stdioGateway.server.env }}
            - name: {{ $e.name | quote }}
              value: {{ $e.value | quote }}
            {{- end }}
            {{- range $e := .Values.container.env }}
            - name: {{ $e.name | quote }}
              value: {{ $e.value | quote }}
            {{- end }}
          {{- end }}
          {{- with .Values.transport.stdioGateway.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else if eq .Values.mode "image" }}
          {{- with .Values.image.command | default .Values.container.command }}
          command: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.image.args | default .Values.container.args }}
          args: {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- else if eq .Values.mode "node" }}
          command: ["/bin/sh","-lc"]
          args:
            - >-
              {{- if .Values.node.preStart }}{{ join " && " .Values.node.preStart }} && {{- end }}
              npx -y {{ if .Values.node.package }}{{ .Values.node.package }}@{{ .Values.node.version }}{{ end }}{{ if .Values.node.args }} {{ join " " .Values.node.args }}{{ end }}
          {{- else if eq .Values.mode "python" }}
          command: ["/bin/sh","-lc"]
          args:
            - >-
              {{- if .Values.python.preStart }}{{ join " && " .Values.python.preStart }} && {{- end }}
              {{- if .Values.python.usePip }}
              python -m {{ .Values.python.package }}{{ if .Values.python.args }} {{ join " " .Values.python.args }}{{ end }}
              {{- else }}
              uvx {{- if .Values.python.fromGit }} --from {{ .Values.python.fromGit }}{{ end }} {{ .Values.python.package }}{{ if .Values.python.args }} {{ join " " .Values.python.args }}{{ end }}
              {{- end }}
          {{- end }}

          {{- if .Values.container.workingDir }}
          workingDir: {{ .Values.container.workingDir | quote }}
          {{- end }}

          ports:
            - name: http
              containerPort: {{ .Values.container.port | default .Values.service.port }}
              protocol: TCP

          {{ with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{ end }}
          {{ with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{ end }}

          {{- if .Values.container.env }}
          env:
            {{- range $e := .Values.container.env }}
            - name: {{ $e.name | quote }}
              value: {{ $e.value | quote }}
            {{- end }}
          {{- end }}
          {{ with .Values.container.extraEnvFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{ end }}

          {{- /* Build a single volumeMounts list from optional pieces */ -}}
          {{- $vm := dict "items" (list) -}}
          {{- if .Values.volumeMounts }}
          {{- $_ := set $vm "items" (concat $vm.items .Values.volumeMounts) -}}
          {{- end }}
          {{- if .Values.config.enabled }}
          {{- $_ := set $vm "items" (concat $vm.items (list (dict "name" "config" "mountPath" .Values.config.mountPath))) -}}
          {{- end }}
          {{- if and (eq .Values.mode "node") (.Values.node.npmrcSecret) }}
          {{- $_ := set $vm "items" (concat $vm.items (list (dict "name" "npmrc" "mountPath" .Values.node.npmrcMountPath "subPath" ".npmrc" "readOnly" true))) -}}
          {{- end }}
          {{- /* Add gateway config mount if present */ -}}
          {{- if and $useGateway (or (gt (len .Values.transport.stdioGateway.servers) 0) (and .Values.transport.stdioGateway.namedServersJson (ne .Values.transport.stdioGateway.namedServersJson ""))) }}
          {{- $_ := set $vm "items" (concat $vm.items (list (dict "name" "gateway-config" "mountPath" "/etc/mcp/servers.json" "subPath" "servers.json" "readOnly" true))) -}}
          {{- end }}
          {{- if $vm.items }}
          volumeMounts:
            {{- toYaml $vm.items | nindent 12 }}
          {{- end }}

      {{/* Volumes */}}
      volumes:
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.config.enabled }}
        - name: config
          configMap:
            name: {{ include "mcp-server.fullname" . }}-config
        {{- end }}
        {{- if and $useGateway (or (gt (len .Values.transport.stdioGateway.servers) 0) (and .Values.transport.stdioGateway.namedServersJson (ne .Values.transport.stdioGateway.namedServersJson ""))) }}
        - name: gateway-config
          configMap:
            name: {{ include "mcp-server.fullname" . }}-gateway
        {{- end }}
        {{- if and (eq .Values.mode "node") (.Values.node.npmrcSecret) }}
        - name: npmrc
          secret:
            secretName: {{ .Values.node.npmrcSecret | quote }}
            optional: false
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
