{{- $hasServers := and (hasKey .Values "servers") (gt (len .Values.servers) 0) -}}
{{- $mm := .Values.metamcp -}}
{{- $mmEnabled := false -}}
{{- if kindIs "map" $mm -}}{{- if kindIs "bool" $mm.enabled -}}{{- $mmEnabled = $mm.enabled -}}{{- end -}}{{- end -}}
{{- if and $hasServers $mmEnabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mcp-server.fullname" . }}-metamcp-register
  labels:
    {{- include "mcp-server.labels" . | nindent 4 }}
    app.kubernetes.io/component: metamcp-register
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        {{- include "mcp-server.labels" . | nindent 8 }}
        app.kubernetes.io/component: metamcp-register
    spec:
      restartPolicy: OnFailure
      containers:
        - name: register
          image: python:3.12-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SVC
              value: {{ printf "%s.%s.svc.cluster.local" (printf "%s-metamcp" .Release.Name) .Release.Namespace | quote }}
            - name: FRONTEND_PORT
              value: "12008"
            - name: ADMIN_EMAIL
              value: {{ (default "admin@example.com" .Values.metamcp.register.admin.email) | quote }}
            - name: ADMIN_PASSWORD
              value: {{ (default "change-me" .Values.metamcp.register.admin.password) | quote }}
            - name: MODE
              value: {{ (default "apply" .Values.metamcp.register.mode) | quote }}
          volumeMounts:
            - name: cfg
              mountPath: /cfg
              readOnly: true
            - name: script
              mountPath: /opt/register
              readOnly: true
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -euo pipefail
              python3 -m pip install --no-cache-dir requests >/dev/null
              echo "Mode=${MODE}"; [ "$MODE" = "print" ] && { cat /cfg/bootstrap.json; exit 0; }
              python3 /opt/register/register.py
      volumes:
        - name: cfg
          configMap:
            name: {{ include "mcp-server.fullname" . }}-metamcp-register
        - name: script
          configMap:
            name: {{ include "mcp-server.fullname" . }}-metamcp-register-script
{{- end }}
