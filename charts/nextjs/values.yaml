nameOverride: ''
fullnameOverride: ''

web:
  imagePullPolicy: IfNotPresent
  imagePullSecrets: '' # must be present in namespace
  image: ''
  terminationGracePeriodSeconds: 0
  replicaCount: 1
  runtimeClassName:

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

  # optional array of additional initcontainers
  initContainers: []
  # Example usage:
    # initContainers:
    # - name: init-mydb
    #   image: busybox:1.36
    #   command: ["/bin/sh"]
    #   args: ["-c", "echo Setting up DB; sleep 5"]
    #   volumeMounts:
    #     - name: next-data
    #       mountPath: /data
    # - name: wait-for-service
    #   image: busybox:1.36
    #   command: ["/bin/sh"]
    #   args: ["-c", "until nc -z some-service 5432; do sleep 3; done"]

  # optional array of additional containers
  extraContainers: []
  # Example usage:
  # extraContainers:
  #   - name: inngest-sync-sidecar
  #     image: curlimages/curl:latest
  #     command:
  #       - /bin/sh
  #       - -c
  #       - |
  #         echo "Sidecar waiting for Next.js readiness..."
  #         # simple poll
  #         for i in $(seq 1 30); do
  #           if curl -fsS localhost:3000/api/health; then
  #             echo "Next.js is ready, calling /api/inngest..."
  #             curl -X PUT localhost:3000/api/inngest
  #             echo "Sync done."
  #             exit 0
  #           fi
  #           sleep 2
  #         done
  #         echo "Sidecar: Next.js never became ready, giving up."
  #         exit 1

  # not sure about the usefulness of this - we are trying to solve some caching issues with next.js
  # so this should be considered experimental.
  cachePersistentVolume:
    enabled: false # If set to true, a PersistentVolumeClaim (PVC) will be created for caching
    storageClass: '' # The storage class to use for the PVC. If not set, the default StorageClass will be used
    existingClaim: '' # If set, this existing PVC will be used instead of creating a new one
    accessModes:
      - ReadWriteOnce # The access modes for the PVC. Can be ReadWriteOnce, ReadOnlyMany, or ReadWriteMany. If cachePersistentVolume is enabled and replicaCount is more than 1, this should be set to ReadWriteMany
    annotations: {} # Annotations to add to the PVC
    size: 1Gi # The requested storage size for the PVC
    volumeMode: '' # The volume mode for the PVC. Can be either "Filesystem" (default) or "Block"
    mountPath: /app/.next/cache # The path to mount the volume in the container

  dataVolume:
    enabled: false # If set to true, a PersistentVolumeClaim (PVC) will be created
    storageClass: '' # The storage class to use for the PVC. If not set, the default StorageClass will be used
    existingClaim: '' # If set, this existing PVC will be used instead of creating a new one
    accessModes:
      - ReadWriteOnce # The access modes for the PVC. Can be ReadWriteOnce, ReadOnlyMany, or ReadWriteMany. If dataVolume is enabled and replicaCount is more than 1, this should be set to ReadWriteMany
    annotations: {} # Annotations to add to the PVC
    size: 1Gi # The requested storage size for the PVC
    volumeMode: '' # The volume mode for the PVC. Can be either "Filesystem" (default) or "Block"
    mountPath: /app/data # The path to mount the volume in the container

  hpa:
    enabled: false
    maxReplicas: 10
    # average total CPU usage per pod (1-100)
    cpu:
    # average memory usage per pod (100Mi-1Gi)
    memory:
    # average http requests per second per pod (k8s-prometheus-adapter)
    requests:

  ingress:
    enabled: false
    ingressClassName: nginx
    annotations: {}
    hosts: []
    tls: []

  service:
    enabled: true
    type: ClusterIP
    port: 3000
    nodePort:
    annotations: {}

  livenessProbe:
    enabled: false
    httpGet:
      endpoint: /api/hc?source=livenessProbe
      httpHeaders: []
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  readinessProbe:
    enabled: false
    httpGet:
      endpoint: /api/hc?source=readinessProbe
      httpHeaders: []
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  extraEnvs: []
  # extraEnvs:
  #   - name: AIRBROKE_GITHUB_ID
  #     value: "xxxx"
  #   - name: AIRBROKE_GITHUB_SECRET
  #     value: "xxxxx"
  #   - name: AIRBROKE_GITHUB_ORGS
  #     value: "xxxxx"
  #   - name: NEXTAUTH_SECRET
  #     value: "xxxxxxx"
  #   - name: NEXTAUTH_URL
  #     value: "https://xxxxxx"
  #   - name: AIRBROKE_OPENAI_API_KEY
  #     value: "sk-xxxxxxx"

  ## Pod Disruption Budget
  ## https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  podDisruptionBudget:
    ## if a PodDisruptionBudget resource is created for the Deployment
    ##
    enabled: false

    ## the maximum unavailable pods/percentage for the Deployment
    ##
    maxUnavailable:

    ## the minimum available pods/percentage for the Deployment
    ##
    minAvailable:
