apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-dashboard
spec:
  replicas: {{ .Values.dashboard.replicaCount }}
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/mcp-dashboard-configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/mcp-dashboard-secret.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: wait-db
          image: busybox:1.36
          command: ["/bin/sh","-lc"]
          args:
            - >-
              echo "Waiting for Postgres at mcp-postgres.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.postgres.service.port }}";
              for i in $(seq 1 60); do
                nc -z -w 1 mcp-postgres.{{ .Release.Namespace }}.svc.cluster.local {{ .Values.postgres.service.port }} && exit 0 || sleep 2;
              done;
              echo "Postgres not reachable"; exit 1;
      containers:
        - name: web
          image: "{{ .Values.dashboard.image.repository }}:{{ .Values.dashboard.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.dashboard.image.pullPolicy }}
          env:
            - name: TZ
              value: UTC
            - name: ENV
              value: production
            - name: SUPER_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mcp-dashboard-secret
                  key: super_admin_username
            - name: SUPER_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mcp-dashboard-secret
                  key: super_admin_password
          envFrom:
            - configMapRef:
                name: "{{ .Release.Name }}-configmap"
          ports:
            - containerPort: {{ .Values.dashboard.service.port }}
            - containerPort: {{ .Values.dashboard.service.api.port }}
          volumeMounts:
            - name: configs
              mountPath: /app/configs
            - name: i18n-files
              mountPath: /app/configs/i18n
            - name: data
              mountPath: /app/data
      volumes:
        - name: data
          emptyDir: {}
        - name: configs
          configMap:
            name: "{{ .Release.Name }}-dashboard-configmap"
            items:
            - key: apiserver.yaml
              path: apiserver.yaml
        - name: i18n-files
          configMap:
            name: "{{ .Release.Name }}-dashboard-configmap"
            items:
            - key: en.toml
              path: en.toml
            - key: zh.toml
              path: zh.toml
