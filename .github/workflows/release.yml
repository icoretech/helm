name: Release Charts

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0

      - name: Setup GPG for Helm Legacy Format
        id: gpg_setup
        run: |
          # 1. CRITICAL: Verify GPG_ARMORED_PRIVATE_KEY_BASE64 secret.
          echo "Verifying decoded private key (should start with -----BEGIN PGP PRIVATE KEY BLOCK-----):"
          echo "${{ secrets.GPG_ARMORED_PRIVATE_KEY_BASE64 }}" | base64 -d 2>/dev/null | head -n 1
          echo "------------------------------------------------------------------------------------"

          # 2. Set up dedicated GPG home.
          export GNUPGHOME="$(pwd)/.gnupg-helm-v2" # New distinct name
          mkdir -p "$GNUPGHOME"
          chmod 700 "$GNUPGHOME"
          echo "GNUPGHOME_PATH=$GNUPGHOME" >> $GITHUB_ENV
          echo "GPG Home set to: $GNUPGHOME"

          # 3. Create gpg-agent.conf for non-interactive pinentry.
          echo "allow-loopback-pinentry" > "$GNUPGHOME/gpg-agent.conf"
          # Optionally add cache TTLs if needed, but keep it minimal for now.
          # echo "default-cache-ttl 3600" >> "$GNUPGHOME/gpg-agent.conf"
          # echo "max-cache-ttl 7200" >> "$GNUPGHOME/gpg-agent.conf"
          chmod 600 "$GNUPGHOME/gpg-agent.conf"
          echo "Created $GNUPGHOME/gpg-agent.conf with allow-loopback-pinentry."

          # 4. Ensure GPG agent is (re)started to pick up the conf.
          # This also helps initialize the GPG directory structure if gpg --import doesn't.
          echo "Restarting/Launching gpg-agent..."
          gpgconf --kill gpg-agent || true
          gpgconf --launch gpg-agent || echo "Warning: gpgconf --launch gpg-agent had an issue."
          # Wait a brief moment for the agent to be ready (optional, but can help in CI)
          sleep 1

          # 5. Import your GPG private key.
          echo "Importing GPG private key into $GNUPGHOME..."
          echo "${{ secrets.GPG_ARMORED_PRIVATE_KEY_BASE64 }}" | base64 -d | \
            gpg --batch --yes --verbose \
              --pinentry-mode loopback \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --import
          if [ $? -ne 0 ]; then echo "::error::GPG Import Failed"; gpg --version; exit 1; fi
          echo "GPG Key Imported. Verifying presence of secret key for ${{ secrets.CR_KEY }}:"
          gpg --batch --list-secret-keys "${{ secrets.CR_KEY }}" || { echo "::error::Secret key ${{ secrets.CR_KEY }} not found after import"; exit 1; }

          # 6. Export keys to LEGACY GPG formats directly into $GNUPGHOME.
          echo "Exporting keys to legacy formats in $GNUPGHOME for key: ${{ secrets.CR_KEY }}"

          gpg --batch --yes --verbose \
            --pinentry-mode loopback \
            --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
            --export -o "$GNUPGHOME/pubring.gpg" "${{ secrets.CR_KEY }}"
          if [ $? -ne 0 ]; then echo "::error::Failed to export $GNUPGHOME/pubring.gpg"; exit 1; fi
          echo "Created $GNUPGHOME/pubring.gpg"

          gpg --batch --yes --verbose \
            --pinentry-mode loopback \
            --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
            --export-secret-keys -o "$GNUPGHOME/secring.gpg" "${{ secrets.CR_KEY }}"
          if [ $? -ne 0 ]; then echo "::error::Failed to export $GNUPGHOME/secring.gpg"; exit 1; fi
          chmod 600 "$GNUPGHOME/secring.gpg"
          echo "Created $GNUPGHOME/secring.gpg"

          echo "Files in $GNUPGHOME:"
          ls -la "$GNUPGHOME"

          # 7. Prepare passphrase file for chart-releaser
          CR_GPG_DIR_IN_WORKSPACE=".cr-helm-assets" # Renamed for clarity
          mkdir -p "$CR_GPG_DIR_IN_WORKSPACE"
          echo "${{ secrets.GPG_PASSPHRASE }}" > "$(pwd)/$CR_GPG_DIR_IN_WORKSPACE/helm_gpg_passphrase"
          echo "CR_PASSPHRASE_FILE_PATH=$(pwd)/$CR_GPG_DIR_IN_WORKSPACE/helm_gpg_passphrase" >> $GITHUB_ENV

          echo "CR_KEYRING_PATH=$GNUPGHOME/pubring.gpg" >> $GITHUB_ENV # Point to the legacy public keyring
          echo "GPG_TTY_VALUE=$(tty)" >> $GITHUB_ENV
        env:
          GPG_ARMORED_PRIVATE_KEY_BASE64: ${{ secrets.GPG_ARMORED_PRIVATE_KEY_BASE64 }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          CR_KEY: ${{ secrets.CR_KEY }}

      - name: Run chart-releaser (package & sign)
        uses: helm/chart-releaser-action@v1.7.0
        with:
          skip_existing: true
        env:
          CR_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
          CR_KEY:               ${{ secrets.CR_KEY }}
          CR_SIGN:              true
          CR_PASSPHRASE_FILE:   ${{ env.CR_PASSPHRASE_FILE_PATH }}
          CR_KEYRING:           ${{ env.CR_KEYRING_PATH }} # $GNUPGHOME/pubring.gpg
          GNUPGHOME:            ${{ env.GNUPGHOME_PATH }}  # Helm uses this GPG home
          GPG_TTY:              ${{ env.GPG_TTY_VALUE }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Charts to GHCR
        run: |
          if [ -d ".cr-release-packages" ]; then
            for pkg in .cr-release-packages/*; do
              if [ -z "${pkg:-}" ]; then
                break
              fi

              helm push "${pkg}" oci://ghcr.io/${GITHUB_REPOSITORY_OWNER}/charts
            done
          else
            echo "Directory .cr-release-packages does not exist."
          fi
